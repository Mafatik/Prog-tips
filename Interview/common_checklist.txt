Что такое GIT?

Чем отличается git rebase от git merge?
   rebase объединяет две ветки в одну (коммиты из первой перезаливаются во
   вторую), merge оставляет историю двух веток.

Как посмотреть, кто закоммитил определенную строчку кода?
   git blame

Что такое ООП?

Что такое SOLID?
   Принцип единственности ответственности -- гласит о том, что каждый класс
      должжен выполнять строго определенную роль. Следует объединять в один
      класс код, который изменяется по одним и тем же причинам и разделять код,
      который изменяется по разным причинам.
   Принцип открытости-закрытости -- гласит о том, что архитектуру ПO следует
      делать таким образом, чтобы код был закрыт для изменений и открыт для
      расширения.
   Принцип подстановки Барбары Лисков -- классы наследники могут быть
      использованы вместо своих родителей не нарушая работу программы.
   Принцип разделения интерфейса -- создание узконаправленных интерфейсов,
      предназначенных для конкретных клиентов. Клиенты не должны зависеть от
      интерфейсов.
   Принцип инверсии зависимостей -- модули верхних уровней не должны зависеть
      от модулей верхних уровней. Абстракции не должны зависеть от деталей. В
      графе зависимостей не должно быть циклов.

SQL JOIN
    Позволяет объединить таблицы некоторым образом
    LEFT JOIN
        SELECT list FROM table_a A LEFT JOIN table_b B
        ON A.value = B.value
        *  *    *  *
     *.......**       *
    *.......*..*       *
    *.......*..*       *
     *.......**       *  
        *  *    *  *  

    LEFT OUTER JOIN
        SELECT list FROM table_a A LEFT JOIN table_b B
        ON A.value = B.value WHERE B.value IS NULL 
        *  *    *  *
     *.......**       *
    *.......*  *       *
    *.......*  *       *
     *.......**       *  
        *  *    *  * 

    RIGHT JOIN
        SELECT list FROM table_a A RIGHT JOIN table_b B
        ON A.value = B.value
        *  *    *  *
     *       **.......*
    *       *..*.......*
    *       *..*.......*
     *       **.......*  
        *  *    *  * 

    RIGHT OUTER JOIN
        SELECT list FROM table_a A RIGHT JOIN table_b B
        ON A.value = B.value WHERE A.value IS NULL 
        *  *    *  *
     *       **.......*
    *       *  *.......*
    *       *  *.......*
     *       **.......*  
        *  *    *  *  

    INNER JOIN
        SELECT list FROM table_a A INNER JOIN table_b B
        ON A.value = B.value
        *  *    *  *
     *       **       *
    *       *..*       *
    *       *..*       *
     *       **       *  
        *  *    *  *   

        
    FULL OUTER JOIN
        SELECT list FROM table_a A OUTTER JOIN table_b B
        ON A.value = B.value
        *  *    *  *
     *.......**.......*
    *.......*..*.......*
    *.......*..*.......*
     *.......**.......*  
        *  *    *  *

    OUTTER JOIN
        SELECT list FROM table_a A OUTTER JOIN table_b B
        ON A.value = B.value
        WHERE A.value IS NULL OR B.value IS NULL
        *  *    *  *
     *.......**.......*
    *.......*  *.......*
    *.......*  *.......*
     *.......**.......*  
        *  *    *  *
